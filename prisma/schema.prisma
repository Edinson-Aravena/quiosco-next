generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// Modelo de Categorías (combinado para ambos sistemas)
model Category {
  id          BigInt    @id @default(autoincrement())
  name        String    @db.VarChar(180)
  description String?   @db.Text
  slug        String?   @db.VarChar(90)
  icon        String?   @db.VarChar(255)
  image       String?   @db.VarChar(255)
  createdAt   DateTime  @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt   DateTime  @updatedAt @map("updated_at") @db.Timestamp(0)
  products    Product[]

  @@map("categories")
}

// Modelo de Productos (combinado para ambos sistemas)
model Product {
  id                    BigInt                    @id @default(autoincrement())
  name                  String                    @db.VarChar(180)
  description           String?                   @db.Text
  price                 Decimal                   @db.Decimal(10, 2)
  image                 String?                   @db.VarChar(255)
  image1                String?                   @db.VarChar(255)
  image2                String?                   @db.VarChar(255)
  image3                String?                   @db.VarChar(255)
  categoryId            BigInt                    @map("id_category")
  createdAt             DateTime                  @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt             DateTime                  @updatedAt @map("updated_at") @db.Timestamp(0)
  category              Category                  @relation(fields: [categoryId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  orderItems            OrderProducts[]
  deliveryOrderProducts DeliveryOrderHasProduct[]

  @@map("products")
}

// Modelo de Órdenes del Quiosco
model Order {
  id                Int             @id @default(autoincrement())
  name              String          @db.VarChar(255)
  total             Float
  date              DateTime        @default(now())
  status            Boolean         @default(false)
  orderInProgressAt DateTime?       @map("order_in_progress_at")
  orderReadyAT      DateTime?       @map("order_ready_at")
  orderDeliveredAt  DateTime?       @map("order_delivered_at")
  orderProducts     OrderProducts[]

  @@map("orders_quiosco")
}

model OrderProducts {
  id        Int      @id @default(autoincrement())
  orderId   Int      @map("order_id")
  productId BigInt   @map("product_id")
  quantity  Int
  order     Order    @relation(fields: [orderId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])

  @@map("order_products_quiosco")
}

// Modelo de Usuarios (combinado)
model User {
  id               BigInt         @id @default(autoincrement())
  email            String?        @unique @db.VarChar(100)
  username         String?        @unique @db.VarChar(90)
  name             String         @db.VarChar(90)
  lastname         String?        @db.VarChar(90)
  phone            String?        @unique @db.VarChar(90)
  image            String?        @db.VarChar(255)
  password         String         @db.VarChar(255)
  role             UserRole       @default(WAITER)
  createdAt        DateTime       @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt        DateTime       @updatedAt @map("updated_at") @db.Timestamp(0)
  roles            UserHasRole[]
  addresses        Address[]
  ordersAsClient   DeliveryOrder[] @relation("ClientOrders")
  ordersAsDelivery DeliveryOrder[] @relation("DeliveryOrders")

  @@map("users")
}

// Modelo de Roles
model Role {
  id        BigInt        @id @default(autoincrement())
  name      String        @unique @db.VarChar(90)
  image     String?       @db.VarChar(255)
  route     String        @db.VarChar(180)
  createdAt DateTime      @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt DateTime      @updatedAt @map("updated_at") @db.Timestamp(0)
  users     UserHasRole[]

  @@map("roles")
}

// Tabla intermedia Usuario-Roles
model UserHasRole {
  userId    BigInt   @map("id_user")
  roleId    BigInt   @map("id_rol")
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamp(0)
  user      User     @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  role      Role     @relation(fields: [roleId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  @@id([userId, roleId])
  @@map("user_has_roles")
}

// Modelo de Direcciones
model Address {
  id            BigInt          @id @default(autoincrement())
  address       String          @db.VarChar(255)
  neighborhood  String          @db.VarChar(180)
  lat           Float           @db.Double
  lng           Float           @db.Double
  userId        BigInt          @map("id_user")
  createdAt     DateTime        @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt     DateTime        @updatedAt @map("updated_at") @db.Timestamp(0)
  user          User            @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  orders        DeliveryOrder[]

  @@map("address")
}

// Modelo de Órdenes de Delivery
model DeliveryOrder {
  id                  BigInt                     @id @default(autoincrement())
  clientId            BigInt                     @map("id_client")
  deliveryId          BigInt?                    @map("id_delivery")
  addressId           BigInt                     @map("id_address")
  lat                 Float?                     @db.Double
  lng                 Float?                     @db.Double
  status              String                     @db.VarChar(90)
  timestamp           BigInt
  createdAt           DateTime                   @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt           DateTime                   @updatedAt @map("updated_at") @db.Timestamp(0)
  client              User                       @relation("ClientOrders", fields: [clientId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  delivery            User?                      @relation("DeliveryOrders", fields: [deliveryId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  address             Address                    @relation(fields: [addressId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  orderProducts       DeliveryOrderHasProduct[]

  @@map("orders")
}

// Tabla intermedia Órdenes-Productos de Delivery
model DeliveryOrderHasProduct {
  orderId   BigInt        @map("id_order")
  productId BigInt        @map("id_product")
  quantity  BigInt
  createdAt DateTime      @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt DateTime      @updatedAt @map("updated_at") @db.Timestamp(0)
  order     DeliveryOrder @relation(fields: [orderId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  product   Product       @relation(fields: [productId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  @@id([orderId, productId])
  @@map("orders_has_products")
}

enum UserRole {
  ADMIN
  CHEF
  WAITER
  CLIENTE
  RESTAURANTE
  REPARTIDOR
}
